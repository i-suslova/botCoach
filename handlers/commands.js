const connectDb = require('../utils/db');
const { setCommands } = require('./setCommands');

let categories = ['üíº –†–∞–±–æ—Ç–∞', 'üè† –õ–∏—á–Ω–æ–µ', 'üí™ –ó–¥–æ—Ä–æ–≤—å–µ'];

const createEntry = async (ctx) => {
  console.log('createEntry called');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', {
    reply_markup: {
      inline_keyboard: categories.map(category => [{ text: category, callback_data: `category_${category}` }])
    }
  });
  ctx.session.awaitingCategory = true;
  await setCommands(ctx);
};

const viewEntries = async (ctx) => {
  console.log('viewEntries called');
  const db = connectDb();
  const userId = ctx.from.id;

  db.all(`SELECT * FROM entries WHERE user_id = ?`, [userId], (err, rows) => {
    if (err) {
      console.error(err);
      ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.');
      return;
    }

    if (rows.length === 0) {
      ctx.reply('–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç.');
    } else {
      const entries = rows.map((row, index) => `${index + 1}. ${row.text} ( ${row.category}, –ó–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞: ${row.date})`).join('\n\n');
      ctx.reply(`–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n${entries}`);
    }
    db.close();
  });

  await setCommands(ctx);
};

const editEntry = async (ctx) => {
  console.log('editEntry called');
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≥–¥–µ —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è:', {
    reply_markup: {
      inline_keyboard: categories.map(category => [{ text: category, callback_data: `edit_category_${category}` }])
    }
  });
  ctx.session.awaitingEditCategory = true;
  await setCommands(ctx);
};

const handleEditCallbackQueries = async (ctx) => {
  try {
    console.log('handleEditCallbackQueries called');
    const data = ctx.callbackQuery.data;
    console.log(`Callback data: ${data}`);

    if (data.startsWith('edit_category_')) {
      const category = data.split('_')[2];
      console.log(`Editing entries in category: ${category}`);
      const db = connectDb();
      const userId = ctx.from.id;

      db.all(`SELECT * FROM entries WHERE user_id = ? AND category = ?`, [userId, category], async (err, rows) => {
        if (err) {
          console.error(err);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.');
          return;
        }

        if (rows.length === 0) {
          await ctx.reply('–í –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.');
        } else {
          const entries = rows.map((row, index) => ({
            text: `${index + 1}. ${row.text} (–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${row.date})`,
            callback_data: `edit_${row.id}`
          }));
          await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
            reply_markup: {
              inline_keyboard: entries.map(entry => [{ text: entry.text, callback_data: entry.callback_data }])
            }
          });
          ctx.session.awaitingEdit = true;
        }
        db.close();
      });

      await setCommands(ctx);
    } else if (data.startsWith('edit_')) {
      const entryId = parseInt(data.split('_')[1]);
      console.log(`Editing entry ID: ${entryId}`);
      const db = connectDb();
      const userId = ctx.from.id;

      db.get(`SELECT * FROM entries WHERE id = ? AND user_id = ?`, [entryId, userId], async (err, row) => {
        if (err) {
          console.error(err);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.');
          return;
        }

        if (row) {
          console.log(`Found entry for editing: ${row.text}`);
          ctx.session.editId = entryId;
          ctx.session.awaitingEdit = true;
          ctx.session.editingText = row.text;  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          await ctx.reply(`–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n\n${row.text}`, {
            reply_markup: {
              force_reply: true
            }
          });
        } else {
          await ctx.reply('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
        }
        db.close();
      });

      await setCommands(ctx);
    }
  } catch (error) {
    console.error('Error in handleEditCallbackQueries:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    await setCommands(ctx);
  }
};
module.exports = { createEntry, viewEntries, editEntry, handleEditCallbackQueries };


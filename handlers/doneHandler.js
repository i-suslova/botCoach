const { getExercises } = require('../utils/exercises');
const db = require('../utils/dbPostgres');

const listTodayExercises = async (ctx) => {
  const userId = ctx.from.id;
  const date = new Date().toISOString().split('T')[0]; // —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD

  try {
    const res = await db.query('SELECT exercise_id, done FROM user_exercises WHERE user_id = (SELECT user_id FROM users WHERE telegram_id = $1) AND date = $2', [userId, date]);

    if (res.rows.length === 0) {
      await ctx.reply('–í—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.');
    } else {
      const exercises = getExercises();
      const todayExercises = res.rows.map(row => {
        const exercise = exercises.find(ex => ex.id === row.exercise_id);
        return { ...exercise, done: row.done };
      });

      const buttons = todayExercises.map(exercise => {
        const status = exercise.done ? '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ü§©' : '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';
        return [{ text: `${exercise.name} (${status})`, callback_data: `status_${exercise.id}` }];
      });

      await ctx.reply('–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!', {
        reply_markup: {
          inline_keyboard: buttons
        }
      });
    }
  } catch (error) {
    console.error('Error listing today\'s exercises:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
};

const toggleExerciseStatus = async (ctx) => {
  const userId = ctx.from.id;
  const data = ctx.callbackQuery.data;
  const exerciseId = parseInt(data.split('_')[1]); // –ü–æ–ª—É—á–∞–µ–º ID —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ callback data

  try {
    const userRes = await db.query('SELECT user_id FROM users WHERE telegram_id = $1', [userId]);
    if (userRes.rows.length === 0) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    const user_id = userRes.rows[0].user_id;

    const currentStatusRes = await db.query('SELECT done FROM user_exercises WHERE user_id = $1 AND exercise_id = $2 AND date = CURRENT_DATE', [user_id, exerciseId]);
    if (currentStatusRes.rows.length === 0) {
      await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.');
      return;
    }
    const currentStatus = currentStatusRes.rows[0].done;

    // –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–±–æ—Ä–∞ "–í—ã–ø–æ–ª–Ω–µ–Ω–æ" –∏–ª–∏ "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
    await ctx.reply('–û—Ç–º–µ—Ç—å—Ç–µ —Å—Ç–∞—Ç—É—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úÖ', callback_data: `done_${exerciseId}_true` },
            { text: '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `done_${exerciseId}_false` }
          ]
        ]
      }
    });
  } catch (error) {
    console.error('Error in toggleExerciseStatus:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
};

const markExerciseAsDone = async (ctx) => {
  const userId = ctx.from.id;
  const data = ctx.callbackQuery.data;
  const [action, exerciseId, done] = data.split('_');
  const isDone = done === 'true';

  try {
    const userRes = await db.query('SELECT user_id FROM users WHERE telegram_id = $1', [userId]);
    if (userRes.rows.length === 0) {
      await ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
      return;
    }
    const user_id = userRes.rows[0].user_id;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ user_exercises
    await db.query('UPDATE user_exercises SET done = $1 WHERE user_id = $2 AND exercise_id = $3 AND date = CURRENT_DATE', [isDone, user_id, exerciseId]);
    console.log(`–û—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ ${isDone ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ' : '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ'}: user_id = ${user_id}, exercise_id = ${exerciseId}, date = CURRENT_DATE`); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    await ctx.answerCallbackQuery(`–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ ${isDone ? '–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ' : '–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ'}!`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    await listTodayExercises(ctx);
  } catch (error) {
    console.error('Error in markExerciseAsDone:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
};

module.exports = { listTodayExercises, toggleExerciseStatus, markExerciseAsDone };

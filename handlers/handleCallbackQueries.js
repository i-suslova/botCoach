const { setCommands } = require('./setCommands');
const connectDb = require('../utils/db'); // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

let categories = ['üíº –†–∞–±–æ—Ç–∞', 'üè† –õ–∏—á–Ω–æ–µ', 'üí™ –ó–¥–æ—Ä–æ–≤—å–µ'];

const handleCallbackQueries = async (ctx) => {
  try {
    const data = ctx.callbackQuery.data;

    if (data === 'create_entry') {
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:', {
        reply_markup: {
          inline_keyboard: categories.map(category => [{ text: category, callback_data: `category_${category}` }])
        }
      });
      ctx.session.awaitingCategory = true;
      await setCommands(ctx);
    } else if (data.startsWith('category_')) {
      const category = data.split('_')[1];
      ctx.session.category = category;
      ctx.session.awaitingCategory = false;
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –∑–∞–ø–∏—Å—å:');
      ctx.session.creatingEntry = true;
      await setCommands(ctx);
    } else if (data === 'view_entries') {
      const db = connectDb();
      const userId = ctx.from.id;

      db.all(`SELECT * FROM entries WHERE user_id = ?`, [userId], (err, rows) => {
        if (err) {
          console.error(err);
          ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.');
          return;
        }

        if (rows.length === 0) {
          ctx.reply('–í–∞—à –¥–Ω–µ–≤–Ω–∏–∫ –ø—É—Å—Ç.');
        } else {
          const entries = rows.map((row, index) => ({
            text: `${index + 1}. ${row.text} ( ${row.category}, –ó–∞–ø–∏—Å—å –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞: ${row.date})`,
            callback_data: `edit_${row.id}`
          }));
          ctx.reply('–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:', {
            reply_markup: {
              inline_keyboard: entries.map(entry => [{ text: entry.text, callback_data: entry.callback_data }])
            }
          });
        }
        db.close();
      });

      await setCommands(ctx);
    }
  } catch (error) {
    console.error('Error in handleCallbackQueries:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    await setCommands(ctx);
  }
};

module.exports = { handleCallbackQueries };
